# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FrameMetadataV1(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FrameMetadataV1()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFrameMetadataV1(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FrameMetadataV1
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FrameMetadataV1
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from GpsTime import GpsTime
            obj = GpsTime()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FrameMetadataV1
    def PeriodNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # FrameMetadataV1
    def ProtonsPerPulse(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # FrameMetadataV1
    def Running(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FrameMetadataV1
    def FrameNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FrameMetadataV1
    def VetoFlags(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def FrameMetadataV1Start(builder):
    builder.StartObject(6)

def Start(builder):
    FrameMetadataV1Start(builder)

def FrameMetadataV1AddTimestamp(builder, timestamp):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(timestamp), 0)

def AddTimestamp(builder, timestamp):
    FrameMetadataV1AddTimestamp(builder, timestamp)

def FrameMetadataV1AddPeriodNumber(builder, periodNumber):
    builder.PrependUint64Slot(1, periodNumber, 0)

def AddPeriodNumber(builder, periodNumber):
    FrameMetadataV1AddPeriodNumber(builder, periodNumber)

def FrameMetadataV1AddProtonsPerPulse(builder, protonsPerPulse):
    builder.PrependUint8Slot(2, protonsPerPulse, 0)

def AddProtonsPerPulse(builder, protonsPerPulse):
    FrameMetadataV1AddProtonsPerPulse(builder, protonsPerPulse)

def FrameMetadataV1AddRunning(builder, running):
    builder.PrependBoolSlot(3, running, 0)

def AddRunning(builder, running):
    FrameMetadataV1AddRunning(builder, running)

def FrameMetadataV1AddFrameNumber(builder, frameNumber):
    builder.PrependUint32Slot(4, frameNumber, 0)

def AddFrameNumber(builder, frameNumber):
    FrameMetadataV1AddFrameNumber(builder, frameNumber)

def FrameMetadataV1AddVetoFlags(builder, vetoFlags):
    builder.PrependUint16Slot(5, vetoFlags, 0)

def AddVetoFlags(builder, vetoFlags):
    FrameMetadataV1AddVetoFlags(builder, vetoFlags)

def FrameMetadataV1End(builder):
    return builder.EndObject()

def End(builder):
    return FrameMetadataV1End(builder)
