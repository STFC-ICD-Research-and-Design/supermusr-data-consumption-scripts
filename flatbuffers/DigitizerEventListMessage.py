# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DigitizerEventListMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DigitizerEventListMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDigitizerEventListMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DigitizerEventListMessageBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x64\x65\x76\x31", size_prefixed=size_prefixed)

    # DigitizerEventListMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DigitizerEventListMessage
    def DigitizerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # DigitizerEventListMessage
    def Metadata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from FrameMetadataV1 import FrameMetadataV1
            obj = FrameMetadataV1()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DigitizerEventListMessage
    def Time(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DigitizerEventListMessage
    def TimeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # DigitizerEventListMessage
    def TimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DigitizerEventListMessage
    def TimeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # DigitizerEventListMessage
    def Voltage(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # DigitizerEventListMessage
    def VoltageAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # DigitizerEventListMessage
    def VoltageLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DigitizerEventListMessage
    def VoltageIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # DigitizerEventListMessage
    def Channel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DigitizerEventListMessage
    def ChannelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # DigitizerEventListMessage
    def ChannelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DigitizerEventListMessage
    def ChannelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def DigitizerEventListMessageStart(builder):
    builder.StartObject(5)

def Start(builder):
    DigitizerEventListMessageStart(builder)

def DigitizerEventListMessageAddDigitizerId(builder, digitizerId):
    builder.PrependUint8Slot(0, digitizerId, 0)

def AddDigitizerId(builder, digitizerId):
    DigitizerEventListMessageAddDigitizerId(builder, digitizerId)

def DigitizerEventListMessageAddMetadata(builder, metadata):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(metadata), 0)

def AddMetadata(builder, metadata):
    DigitizerEventListMessageAddMetadata(builder, metadata)

def DigitizerEventListMessageAddTime(builder, time):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(time), 0)

def AddTime(builder, time):
    DigitizerEventListMessageAddTime(builder, time)

def DigitizerEventListMessageStartTimeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTimeVector(builder, numElems: int) -> int:
    return DigitizerEventListMessageStartTimeVector(builder, numElems)

def DigitizerEventListMessageAddVoltage(builder, voltage):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(voltage), 0)

def AddVoltage(builder, voltage):
    DigitizerEventListMessageAddVoltage(builder, voltage)

def DigitizerEventListMessageStartVoltageVector(builder, numElems):
    return builder.StartVector(2, numElems, 2)

def StartVoltageVector(builder, numElems: int) -> int:
    return DigitizerEventListMessageStartVoltageVector(builder, numElems)

def DigitizerEventListMessageAddChannel(builder, channel):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(channel), 0)

def AddChannel(builder, channel):
    DigitizerEventListMessageAddChannel(builder, channel)

def DigitizerEventListMessageStartChannelVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartChannelVector(builder, numElems: int) -> int:
    return DigitizerEventListMessageStartChannelVector(builder, numElems)

def DigitizerEventListMessageEnd(builder):
    return builder.EndObject()

def End(builder):
    return DigitizerEventListMessageEnd(builder)
